@page "/Games"
@using GameServiceProtos
@using Grpc.Core
@inject GameService.GameServiceClient GameClient

<h3>Games</h3>

@if (gameList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <ul>
            @foreach (var g in currentPage)
            {
                <li>
                    @g.Name (@g.Publisher)
                </li>
            }
        </ul>
        <div>
            <button @onclick="PreviousPage">-</button>
            <button @onclick="NextPage">+</button>
            
        </div>
    </div>
}

@code {
    private GameList? gameList;

    private List<Game[]>? pages;
    private Game[] currentPage;
    private int currentPageIndex;
    private int maxPageIndex;

     public void NextPage()
    {
        if (currentPageIndex + 1 >= maxPageIndex)
        {
            return;
        }

        currentPageIndex++;
        currentPage = pages[currentPageIndex];
    }

     public void PreviousPage()
    {
        if (currentPageIndex - 1 < 0)
        {
            return;
        }

        currentPageIndex--;
        currentPage = pages[currentPageIndex];
    }
  
        
    
    Metadata headers = new()
    {
        { "x-api-key", "vwznnZRX1uX5dLDzw2RqGN1UevEHFoJjUGT6qcOCPLCLCa29VAlhBvbnpLA5fMBm" }
    };

    protected override async Task OnInitializedAsync()
    {
        gameList = await GameClient.GetGamesAsync(new EmptyMessage { }, headers);
        pages = gameList.Games.Chunk(20).ToList();
        maxPageIndex = pages.Count();
        currentPageIndex = 0;
        currentPage = pages[currentPageIndex];
    }

}