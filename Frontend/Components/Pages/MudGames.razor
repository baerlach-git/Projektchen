@page "/MudGames"
@rendermode InteractiveServer
@using Frontend.Components.Dialogs
@using Frontend.Helpers
@using GameServiceProtos
@using Shared.Models
@inject GameService.GameServiceClient GameClient
@inject IDialogService DialogService

@if (_games == null )
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid T="Game" Items="@_games.Games_" ReadOnly="true" ExpandSingleRow="false" SortMode="SortMode.Multiple" QuickFilter="@QuickFilter"
                 Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Games</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="Game" EnableHeaderToggle="true"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.ReleaseDate" Title="Release "/>
            <TemplateColumn T="Game" Title="Your Rating">
                <CellTemplate>
                    <MudRating SelectedValue="@context.Item.UserRating" SelectedValueChanged="@(async(rating) => await RateGame(@context.Item.Id, rating))"></MudRating>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.AverageRating" Title="Average Rating"/>
            <TemplateColumn T="Game" Title="Comments">
                <CellTemplate>
                    <MudLink Href="@($"/MudGame/?Id={context.Item.Id}")">
                        @context.Item.CommentCount <MudIcon Icon="@Icons.Material.Filled.Comment"/> 
                    </MudLink>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.CommentCount" Title="#Comments"/>
            <PropertyColumn Property="x => x.Developer" Title="Developer"/>
            <PropertyColumn Property="x => x.Publisher" Title="Publisher"/>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader Style="color:#0b5ed7">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" >@context.Item.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Release Year: @context.Item.ReleaseDate</MudText>
                    <MudText>Average Rating: @context.Item.AverageRating</MudText>
                    <MudText>#Comments: @context.Item.CommentCount</MudText>
                    <MudText>Genre: @context.Item.Genre</MudText>
                    <MudText>Platform: @context.Item.Platform</MudText>
                    <MudText>Developer: @context.Item.Developer</MudText>
                    <MudText>Publisher: @context.Item.Publisher</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await OpenDeleteDialogAsync(context.Item.Id, context.Item.Name))"></MudIconButton>
                </MudCardActions>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Game"></MudDataGridPager>
        </PagerContent>
    </MudDataGrid>

    
}

@code {

    GameServiceProtos.Games? _games;

    string? SearchString { get; set; }

    // quick filter - filter globally across multiple columns with the same input
    private Func<Game, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;
        if (x.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.ReleaseDate.ToString().Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Publisher.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Developer.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Platform.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Genre.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    private async Task RefreshData()
    {
        _games = await GameClient.GetGamesAsync(new EmptyMessage { }, HttpConfig.Headers);
    }
    
    private async Task RateGame(int gameId, int rating)
    {
        await GameClient.AddRatingAsync(new GameRatingRequest { GameId = gameId, Rating = rating }, HttpConfig.Headers);
        await RefreshData();
    }

    private Task OpenDeleteDialogAsync(int gameId, string gameName)
    {
        var parameters = new DialogParameters<DeleteGameDialog>
        {
            { x => x.DeleteGame, DeleteGame(gameId) },
            { x => x.GameName, gameName }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true};
        
        return DialogService.ShowAsync<DeleteGameDialog>("Delete Game", parameters,  options);
    }
    
    private async Task DeleteGame(int gameId)
    {
        await GameClient.DeleteGameAsync(new DeleteGameRequest() { GameId = gameId}, HttpConfig.Headers);
        await RefreshData();
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

}