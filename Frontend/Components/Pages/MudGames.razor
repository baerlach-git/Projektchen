@page "/MudGames"
@rendermode InteractiveServer
@using Frontend.Helpers
@using GameServiceProtos
@using Shared.Models
@inject GameService.GameServiceClient GameClient

@if (_games == null )
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid T="Game" Items="@_games.Games_" ReadOnly="true" ExpandSingleRow="false" SortMode="SortMode.Multiple" QuickFilter="@QuickFilter"
                 Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Games</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <HierarchyColumn T="Game" EnableHeaderToggle="true"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.ReleaseDate" Title="Release "/>
            <PropertyColumn Property="x => x.AverageRating" Title="Average Rating"/>
            <PropertyColumn Property="x => x.CommentCount" Title="#Comments"/>
            <PropertyColumn Property="x => x.Developer" Title="Developer"/>
            <PropertyColumn Property="x => x.Publisher" Title="Publisher"/>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader Style="color:#0b5ed7">
                    <CardHeaderContent>
                        <MudLink Href="@($"/MudGame/?Id={context.Item.Id}")" Typo="Typo.h6" Color="Color.Secondary">lalala</MudLink>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>Release Year: @context.Item.ReleaseDate</MudText>
                    <MudText>Average Rating: @context.Item.AverageRating</MudText>
                    <MudText>#Comments: @context.Item.CommentCount</MudText>
                    <MudText>Genre: @context.Item.Genre</MudText>
                    <MudText>Platform: @context.Item.Platform</MudText>
                    <MudText>Developer: @context.Item.Developer</MudText>
                    <MudText> Publisher: @context.Item.Publisher</MudText>
                </MudCardContent>
                <MudCardActions>
                    
                </MudCardActions>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Game"></MudDataGridPager>
        </PagerContent>
    </MudDataGrid>

    
}

@code {

    GameServiceProtos.Games _games;

    string? SearchString { get; set; }

    // quick filter - filter globally across multiple columns with the same input
    private Func<Game, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(SearchString))
            return true;
        if (x.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.ReleaseDate.ToString().Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Publisher.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Developer.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Platform.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Genre.Contains(SearchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };







    protected override async Task OnInitializedAsync()
    {
        _games = await GameClient.GetGamesAsync(new EmptyMessage { }, HttpConfig.Headers);

    }

}