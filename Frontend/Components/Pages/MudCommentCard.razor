@using Frontend.Helpers
@using GameServiceProtos
@inject GameService.GameServiceClient GameService
@inject ISnackbar Snackbar



<MudCard Outlined="true" Elevation="2" Style="width: 100%; height:fit-content; margin-bottom: 0.5em; margin-top: 0.5em;">
<MudCardHeader>
    <MudText>@Comment.CreatedAt</MudText>
</MudCardHeader>
<MudCardContent>
    <MudTextField T="string" Variant="Variant.Outlined"  @bind-Text="@Comment.Content" Disabled="@_disabled">
    </MudTextField>
</MudCardContent>
<MudCardActions>
    <MudStack Row="true">
        <MudButton Variant="Variant.Text" ButtonType="ButtonType.Button" Color="Color.Primary" OnClick="@ToggleEdit">Edit</MudButton>
        @if (!_disabled)
        {
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Text" Color="Color.Default" OnClick="@CancelEdit">Cancel</MudButton>
        }
        @if (_originalComment != Comment.Content)
        {
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveEdit">Ã„nderungen Speichern</MudButton>

        }
        
        
    </MudStack>
    
    <MudButton Variant="Variant.Text" ButtonType="ButtonType.Button" Color="Color.Warning" OnClick="@(async() => await DeleteComment(Comment.Id, Comment.ParentId))">Delete</MudButton>
</MudCardActions>

</MudCard>



@code {
    [Parameter]
    public required GameComment Comment { get; set; }
    [Parameter]
    public required Task RefreshData { get; set; }
    [Parameter]
    public required Func<int, int?, Task> DeleteComment { get; set; }
    bool _disabled  = true;
    string _originalComment = null!;
    
    
    private void ToggleEdit()
    {
        _disabled = !_disabled;
    }

    private void CancelEdit()
    {
        _disabled = true;
        Comment.Content = _originalComment;
    }

    private async Task SaveEdit()
    {
        var response = await GameService.UpdateGameCommentAsync(new UpdateGameCommentRequest { CommentId = Comment.Id, Content = Comment.Content }, HttpConfig.Headers);
        Snackbar.Add(response.Message, response.Success ? Severity.Success : Severity.Error);
        await RefreshData;
    }
    
    //private async Task DeleteComment()
    //{
    //    var response = await GameService.DeleteGameCommentAsync(new DeleteGameCommentRequest { CommentId = Comment.Id, ParentId = Comment.ParentId }, HttpConfig.Headers);
    //    Snackbar.Add(response.Message, response.Success ? Severity.Success : Severity.Error);
    //    await RefreshData;
    //}

    protected override void OnInitialized()
    {
        _originalComment = Comment.Content;
    }

}