@page "/NewGame"
@rendermode InteractiveServer
@using Frontend.Components.Other
@using Frontend.Helpers
@using GameServiceProtos
@using Shared.Models
@inject GameService.GameServiceClient GameClient
@inject ISnackbar Snackbar

<h3>MudNewGame</h3>

@if (_publishers == null || _developers == null || _genres == null || _platforms == null)
{
    <Loading/>
}

else
{

    <MudForm @ref="@_form" @bind-IsValid="@_isValid" @bind-Errors="@_errors">
        <MudTextField  InputId="Name" @bind-Value="_name" Label="Name" Variant="Variant.Outlined" T="string?" Required="true" RequiredError="A game name is required." MaxLength="100" Validation="@(new Func<string?, IEnumerable<string>>(ValidateNameLength))"></MudTextField>
        <MudNumericField InputId="ReleaseDate" @bind-Value="@_releaseDate" Label="Release Year"  Variant="Variant.Outlined" T="int?" Required="true" RequiredError="A release date is required." Validation="@(new Func<int?, IEnumerable<string>>(ValidateReleaseDate))"></MudNumericField>
        <MudSelect InputId="Publisher" @bind-Value="_publisherId"
                   Variant="Variant.Outlined"
                   Label="Publisher" Required="true" RequiredError="A publisher is required." Validation="@(new Func<int, IEnumerable<string>>(ValidateSelection))">
            @foreach (var pub in _publishers)
            {
                <MudSelectItem Value="@pub.Id">@pub.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect InputId="Developer" @bind-Value="_developerId"
                   Variant="Variant.Outlined"
                   Label="Developer"
                   Placeholder="" Required="true" RequiredError="A developer is required." Validation="@(new Func<int, IEnumerable<string>>(ValidateSelection))">
            @foreach (var dev in _developers)
            {
                <MudSelectItem Value="@dev.Id">@dev.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect InputId="Platform" @bind-SelectedValues="@_platformIds" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetPlatformSelectionText))" MultiSelection="true" T="int" Variant="Variant.Outlined"
                   Label="Platform" Required="true" RequiredError="At least one platform is required." Validation="@(new Func<IEnumerable<int>?, IEnumerable<string>>(ValidateMultiSelection))">
            @foreach (var plf in _platforms)
            {
                <MudSelectItem T="int" Value="@plf.Id">@plf.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect InputId="Genre" @bind-SelectedValues="@_genreIds" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetGenreSelectionText))" MultiSelection="true" T="int" Variant="Variant.Outlined"
                   Label="Genre" Required="true" RequiredError="At least one genre is required." Validation="@(new Func<IEnumerable<int>?, IEnumerable<string>>(ValidateMultiSelection))">
            @foreach (var gen in _genres)
            {
                <MudSelectItem T="int" Value="@gen.Id">@gen.Name</MudSelectItem>
            }
        </MudSelect>
        <MudButton  ButtonType="ButtonType.Button" Variant="Variant.Text" OnClick="@(()=>_form.Validate())">Validate Entries</MudButton>
        <MudButton Disabled="@(!_isValid)" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async()=>await Submit())">Submit</MudButton>
    </MudForm>
    <MudPaper>
        <MudText>@_errors.Length errors</MudText>
            @foreach (var error in _errors)
            {
                <MudText>@error</MudText>

            }

    </MudPaper>




@code {
    bool _isValid;
    string[] _errors = [];
    MudForm _form = new();
    string? _name;
    int? _releaseDate;
    int _publisherId;
    int _developerId;
    IEnumerable<int>? _platformIds;
    IEnumerable<int>? _genreIds;

    List<(int Id, string Name)>? _publishers;
    List<(int Id, string Name)>? _genres;
    List<(int Id, string Name)>? _developers;
    List<(int Id, string Name)>? _platforms;
    readonly Dictionary<int, string> _platformDict = [];
    readonly Dictionary<int, string> _genreDict = [];
    

    
    string GetPlatformSelectionText( List<string> selectedValues)
    {
        var selectedNames = selectedValues.Select(sv => _platformDict[int.Parse(sv)]).ToArray();
        return string.Join(",",  selectedNames );   
    }
    string GetGenreSelectionText( List<string> selectedValues)
    {
        var selectedNames = selectedValues.Select(sv => _genreDict[int.Parse(sv)]).ToArray();
        return string.Join(",",  selectedNames );   
    }

    IEnumerable<string> ValidateNameLength(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            yield return "A game name is required";
        }

        if (name.Length < 1)
        {
            yield return "The name must be at least 1 character long";
        }

        if (name.Length > 100)
        {
            yield return "The name must be less than 100 character long";
        }
    }

    IEnumerable<string> ValidateReleaseDate(int? releaseDate)
    {
        if (releaseDate == null)
        {
            yield return "A game release year is required";
        }

        if (releaseDate < 1950)
        {
            yield return "The release year must be at least 1950";
        }

        if (releaseDate > DateTime.Now.Year)
        {
            yield return "The release year cannot lie in the future";
        }
    }

    IEnumerable<string> ValidateSelection(int selected)
    {
        if (selected == 0)
            yield return "An option has to be selected";
    }

    IEnumerable<string> ValidateMultiSelection(IEnumerable<int>? selectedValues)
    {
        if (selectedValues == null || !selectedValues.Any())
        {
            yield return "At least one option has to be selected";
        }
    }

    void ResetInputs()
    {
        _name = null;
        _releaseDate = null;
        _genreIds = null;
        _platformIds = null;
        _publisherId = 0;
        _developerId = 0;
    }
    
    
    async Task Submit()
    {
        var gameCreationData = new GameCreationData
        {
            Name = _name,
            ReleaseDate = _releaseDate,
            DeveloperId = _developerId,
            PublisherId = _publisherId,
            PlatformIds = _platformIds.ToList(),
            GenreIds = _genreIds.ToList()
        };
        
        if (_isValid)
        {
            var response = await GameClient.AddGameAsync(new AddGameRequest()
            {
                Name = gameCreationData.Name,
                ReleaseDate = (int)gameCreationData.ReleaseDate!,
                DeveloperId = (int)gameCreationData.DeveloperId!,
                PublisherId = (int)gameCreationData.PublisherId!,
                PlatformIds = { gameCreationData.PlatformIds },
                GenreIds = { gameCreationData.GenreIds }
            }, HttpConfig.Headers);
            
            Snackbar.Add(response.Message, response.Success ? Severity.Success : Severity.Error);
            if (response.Success)
            {
                ResetInputs();
            }
        }
        
    }
    
    
    

    protected override async Task OnInitializedAsync()
    {
        var gameCreationPresets = await GameClient.GetGameCreationPresetsAsync(new EmptyMessage() { }, HttpConfig.Headers);
        _publishers = gameCreationPresets.Publishers.Select(p => (p.Id, p.Name)).ToList();
        _developers = gameCreationPresets.Developers.Select(p => (p.Id, p.Name)).ToList();
        _platforms = gameCreationPresets.Platforms.Select(p => (p.Id, p.Name)).ToList();
        _genres = gameCreationPresets.Genres.Select(p => (p.Id, p.Name)).ToList();
        
        _platforms.ForEach(plf => _platformDict.Add(plf.Id, plf.Name));
        _genres.ForEach(gen => _genreDict.Add(gen.Id, gen.Name));
        
        await base.OnInitializedAsync();
    }

}
}